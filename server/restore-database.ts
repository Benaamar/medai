import { db } from './db';
import { users, patients, consultations, aiSummaries } from '@shared/schema';
import * as fs from 'fs';
import * as path from 'path';

interface BackupData {
  users: any[];
  patients: any[];
  consultations: any[];
  aiSummaries: any[];
  timestamp: string;
  version: string;
}

export async function restoreFromJson(backupFilePath: string): Promise<void> {
  try {
    console.log('üöÄ D√©but de la restauration de la base de donn√©es...');
    console.log(`üìÅ Fichier de sauvegarde: ${backupFilePath}`);

    // V√©rifier que le fichier existe
    if (!fs.existsSync(backupFilePath)) {
      throw new Error(`Le fichier de sauvegarde n'existe pas: ${backupFilePath}`);
    }

    // Lire le fichier de sauvegarde
    const backupContent = fs.readFileSync(backupFilePath, 'utf-8');
    const backupData: BackupData = JSON.parse(backupContent);

    console.log('üìä Informations de la sauvegarde:');
    console.log(`üìÖ Date: ${new Date(backupData.timestamp).toLocaleString('fr-FR')}`);
    console.log(`üî¢ Version: ${backupData.version}`);
    console.log(`üë§ Utilisateurs: ${backupData.users.length}`);
    console.log(`üë• Patients: ${backupData.patients.length}`);
    console.log(`üìã Consultations: ${backupData.consultations.length}`);
    console.log(`ü§ñ R√©sum√©s IA: ${backupData.aiSummaries.length}`);

    // Demander confirmation
    console.log('\n‚ö†Ô∏è  ATTENTION: Cette op√©ration va supprimer toutes les donn√©es existantes!');
    console.log('Voulez-vous continuer? (o/N)');

    // Pour l'automatisation, on peut passer un param√®tre
    const shouldProceed = process.argv.includes('--force') || process.argv.includes('-f');
    
    if (!shouldProceed) {
      console.log('‚ùå Restauration annul√©e. Utilisez --force pour forcer la restauration.');
      return;
    }

    // Supprimer les donn√©es existantes (dans l'ordre des d√©pendances)
    console.log('\nüóëÔ∏è  Suppression des donn√©es existantes...');
    await db.delete(aiSummaries);
    console.log('‚úÖ R√©sum√©s IA supprim√©s');
    
    await db.delete(consultations);
    console.log('‚úÖ Consultations supprim√©es');
    
    await db.delete(patients);
    console.log('‚úÖ Patients supprim√©s');
    
    await db.delete(users);
    console.log('‚úÖ Utilisateurs supprim√©s');

    // Restaurer les donn√©es
    console.log('\nüì• Restauration des donn√©es...');

    // Restaurer les utilisateurs
    if (backupData.users.length > 0) {
      await db.insert(users).values(backupData.users);
      console.log(`‚úÖ ${backupData.users.length} utilisateurs restaur√©s`);
    }

    // Restaurer les patients
    if (backupData.patients.length > 0) {
      await db.insert(patients).values(backupData.patients);
      console.log(`‚úÖ ${backupData.patients.length} patients restaur√©s`);
    }

    // Restaurer les consultations
    if (backupData.consultations.length > 0) {
      await db.insert(consultations).values(backupData.consultations);
      console.log(`‚úÖ ${backupData.consultations.length} consultations restaur√©es`);
    }

    // Restaurer les r√©sum√©s IA
    if (backupData.aiSummaries.length > 0) {
      await db.insert(aiSummaries).values(backupData.aiSummaries);
      console.log(`‚úÖ ${backupData.aiSummaries.length} r√©sum√©s IA restaur√©s`);
    }

    console.log('\nüéâ Restauration termin√©e avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la restauration:', error);
    throw error;
  }
}

export async function listBackupFiles(): Promise<string[]> {
  const backupDir = path.join(process.cwd(), 'backups');
  
  if (!fs.existsSync(backupDir)) {
    console.log('üìÅ Aucun dossier de sauvegarde trouv√©');
    return [];
  }

  const files = fs.readdirSync(backupDir)
    .filter(file => file.endsWith('.json') && file.includes('medical-ai-backup'))
    .sort()
    .reverse(); // Plus r√©cent en premier

  return files.map(file => path.join(backupDir, file));
}

async function main() {
  try {
    const args = process.argv.slice(2);
    
    if (args.includes('--list') || args.includes('-l')) {
      // Lister les sauvegardes disponibles
      console.log('üìã Sauvegardes disponibles:');
      const backupFiles = await listBackupFiles();
      
      if (backupFiles.length === 0) {
        console.log('Aucune sauvegarde trouv√©e.');
        return;
      }

      backupFiles.forEach((file, index) => {
        const filename = path.basename(file);
        const stats = fs.statSync(file);
        const size = (stats.size / 1024).toFixed(2) + ' KB';
        const date = stats.mtime.toLocaleString('fr-FR');
        console.log(`${index + 1}. ${filename} (${size}, ${date})`);
      });
      return;
    }

    // Trouver le fichier de sauvegarde √† utiliser
    let backupFile = '';
    
    if (args.length > 0 && !args[0].startsWith('-')) {
      // Fichier sp√©cifi√© en argument
      backupFile = args[0];
      if (!path.isAbsolute(backupFile)) {
        backupFile = path.resolve(backupFile);
      }
    } else {
      // Utiliser la sauvegarde la plus r√©cente
      const backupFiles = await listBackupFiles();
      if (backupFiles.length === 0) {
        console.log('‚ùå Aucune sauvegarde trouv√©e. Cr√©ez d\'abord une sauvegarde avec backup-database.ts');
        process.exit(1);
      }
      backupFile = backupFiles[0];
      console.log(`üìÅ Utilisation de la sauvegarde la plus r√©cente: ${path.basename(backupFile)}`);
    }

    await restoreFromJson(backupFile);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    process.exit(1);
  } finally {
    process.exit(0);
  }
}

// Afficher l'aide
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
üóÉÔ∏è  Script de restauration de base de donn√©es - Medical AI Companion

USAGE:
  tsx server/restore-database.ts [OPTIONS] [FICHIER_SAUVEGARDE]

OPTIONS:
  --list, -l     Lister les sauvegardes disponibles
  --force, -f    Forcer la restauration sans confirmation
  --help, -h     Afficher cette aide

EXEMPLES:
  tsx server/restore-database.ts --list
  tsx server/restore-database.ts --force
  tsx server/restore-database.ts backups/medical-ai-backup-2024-01-15.json --force

‚ö†Ô∏è  ATTENTION: Cette op√©ration supprime toutes les donn√©es existantes!
  `);
  process.exit(0);
}

// Ex√©cuter si ce fichier est appel√© directement
const isMainModule = process.argv[1] && process.argv[1].endsWith('restore-database.ts');
if (isMainModule) {
  main();
} 