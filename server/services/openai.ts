import OpenAI from "openai";
import type { Consultation, Patient, ConsultationWithPatient } from "@shared/schema";

// Initialisation du client OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "votre-cl√©-api-openai"
});

export interface MedicalSummaryRequest {
  consultation: ConsultationWithPatient;
  summaryType: "consultation" | "prescription" | "referral";
}

export interface MedicalSummaryResponse {
  content: string;
  type: string;
}

export async function generateMedicalSummary(request: MedicalSummaryRequest): Promise<MedicalSummaryResponse> {
  const { consultation, summaryType } = request;
  const { patient } = consultation;

  let systemPrompt = "";
  let userPrompt = "";

  const patientAge = calculateAge(patient.birthDate);
  const patientInfo = `${patient.firstName} ${patient.lastName}, ${patientAge} ans, n√©(e) le ${patient.birthDate}`;
  const currentDate = new Date().toLocaleDateString('fr-FR');

  switch (summaryType) {
    case "consultation":
      systemPrompt = `Vous √™tes un m√©decin exp√©riment√© sp√©cialis√© dans la r√©daction de synth√®ses de consultations m√©dicales.
      R√©digez une synth√®se professionnelle, structur√©e et compl√®te en fran√ßais m√©dical appropri√©.
      Utilisez une structure claire avec des sections bien d√©finies: MOTIF DE CONSULTATION, ANAMN√àSE, EXAMEN CLINIQUE, DIAGNOSTIC, CONDUITE √Ä TENIR.
      Soyez pr√©cis, factuel et utilisez une terminologie m√©dicale appropri√©e.
      R√©pondez uniquement avec le contenu de la synth√®se, sans introduction ni conclusion.`;
      
      userPrompt = `R√©digez une synth√®se de consultation m√©dicale pour:
      Patient: ${patientInfo}
      Date de consultation: ${currentDate}
      Motif de consultation: ${consultation.reason}
      Notes de consultation: ${consultation.notes || "Examen de routine"}
      Diagnostic: ${consultation.diagnosis || "√Ä d√©terminer"}
      Traitement: ${consultation.treatment || "√Ä d√©finir"}
      
      Cr√©ez une synth√®se m√©dicale professionnelle compl√®te en utilisant un format structur√© avec des sections clairement identifi√©es.`;
      break;

    case "prescription":
      systemPrompt = `Vous √™tes un m√©decin exp√©riment√© sp√©cialis√© dans la r√©daction d'ordonnances m√©dicales.
      R√©digez une ordonnance m√©dicale claire, pr√©cise et professionnelle en fran√ßais.
      Incluez l'en-t√™te avec les informations du m√©decin, les informations du patient, la date.
      Pour chaque m√©dicament, pr√©cisez: nom, dosage, posologie exacte, dur√©e du traitement, et modalit√©s de renouvellement si n√©cessaire.
      Ajoutez une section de conseils et recommandations adapt√©s √† la pathologie.
      Terminez par une signature formelle.
      Utilisez un format structur√© et professionnel.`;
      
      userPrompt = `R√©digez une ordonnance m√©dicale pour:
      Patient: ${patientInfo}
      Date: ${currentDate}
      Diagnostic: ${consultation.diagnosis || "Consultation de routine"}
      Traitement prescrit: ${consultation.treatment || "Selon indication clinique"}
      
      Cr√©ez une ordonnance m√©dicale compl√®te et professionnelle avec tous les √©l√©ments requis.`;
      break;

    case "referral":
      systemPrompt = `Vous √™tes un m√©decin exp√©riment√© sp√©cialis√© dans la r√©daction de courriers de correspondance m√©dicale.
      R√©digez un courrier professionnel adress√© √† un confr√®re sp√©cialiste en fran√ßais m√©dical appropri√©.
      Incluez: en-t√™te professionnel, formule d'introduction courtoise, pr√©sentation du patient, motif d'adressage, 
      anamn√®se d√©taill√©e, r√©sultats de l'examen clinique, examens compl√©mentaires r√©alis√©s, 
      diagnostic provisoire, traitements d√©j√† instaur√©s, demande sp√©cifique au sp√©cialiste, et formule de conclusion courtoise.
      Utilisez un ton professionnel et une terminologie m√©dicale pr√©cise.`;
      
      userPrompt = `R√©digez un courrier de correspondance m√©dicale pour:
      Patient: ${patientInfo}
      Date: ${currentDate}
      Motif de consultation initiale: ${consultation.reason}
      Diagnostic actuel: ${consultation.diagnosis || "√Ä pr√©ciser"}
      Notes cliniques: ${consultation.notes || "Examen clinique normal"}
      Traitement actuel: ${consultation.treatment || "Aucun traitement en cours"}
      
      R√©digez un courrier de correspondance complet pour adresser ce patient √† un sp√©cialiste appropri√© en fonction du diagnostic ou des sympt√¥mes pr√©sent√©s.`;
      break;
  }

  try {
    // Utilisation du mod√®le gpt-3.5-turbo qui est moins co√ªteux que gpt-4o
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Mod√®le moins co√ªteux
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0.3,
      max_tokens: 1000,
    });

    const content = response.choices[0].message.content;
    if (!content) {
      throw new Error("Aucun contenu g√©n√©r√© par l'IA");
    }

    return {
      content,
      type: summaryType
    };
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration de la synth√®se IA:", error);
    throw new Error(`Erreur lors de la g√©n√©ration de la synth√®se: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

export interface SpeechToTextResponse {
  text: string;
  language?: string;
}

export async function transcribeAudio(audioBuffer: Buffer): Promise<SpeechToTextResponse> {
  try {
    console.log('üéµ D√©but de la transcription, taille du buffer:', audioBuffer.length);
    
    // V√©rifier que nous avons une cl√© API
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === "your-openai-api-key-here") {
      throw new Error("Cl√© API OpenAI non configur√©e. Veuillez configurer OPENAI_API_KEY dans le fichier .env");
    }
    
    // Cr√©er un objet File-like pour l'API Whisper
    // Utiliser Blob au lieu de File pour une meilleure compatibilit√© Node.js
    const audioBlob = new Blob([audioBuffer], { type: "audio/wav" });
    
    // Cr√©er un objet compatible avec l'API OpenAI
    const audioFile = new File([audioBlob], "recording.wav", { 
      type: "audio/wav",
      lastModified: Date.now()
    });
    
    console.log('üìÅ Fichier audio cr√©√© pour Whisper:', {
      name: audioFile.name,
      type: audioFile.type,
      size: audioFile.size
    });
    
    // Utiliser l'API Whisper d'OpenAI pour la transcription
    console.log('üöÄ Appel √† l\'API Whisper...');
    const response = await openai.audio.transcriptions.create({
      file: audioFile,
      model: "whisper-1",
      language: "fr", // Fran√ßais
      response_format: "json",
      temperature: 0.2,
    });

    console.log('‚úÖ Transcription Whisper r√©ussie:', response.text);

    if (!response.text || response.text.trim() === '') {
      throw new Error("Aucun texte d√©tect√© dans l'audio. Parlez plus clairement ou v√©rifiez votre microphone.");
    }

    return {
      text: response.text.trim(),
      language: "fr"
    };
  } catch (error) {
    console.error("üí• Erreur lors de la transcription audio:", error);
    
    // Gestion d'erreurs sp√©cifiques
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error("Cl√© API OpenAI invalide ou non configur√©e");
      }
      if (error.message.includes('rate limit')) {
        throw new Error("Limite de taux API d√©pass√©e. Veuillez r√©essayer dans quelques instants");
      }
      if (error.message.includes('file size')) {
        throw new Error("Fichier audio trop volumineux. Maximum 25MB");
      }
      if (error.message.includes('file format')) {
        throw new Error("Format de fichier non support√©. Utilisez WAV, MP3, M4A, etc.");
      }
    }
    
    throw new Error(`Erreur lors de la transcription: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

function calculateAge(birthDate: string): number {
  const birth = new Date(birthDate);
  const today = new Date();
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  
  return age;
}
