import axios from 'axios';
import { config } from 'dotenv';

config();

const apiKey = process.env.ANTHROPIC_API_KEY;

// Interface pour la r√©ponse de l'API Anthropic
interface AnthropicResponse {
  content: Array<{
    type: string;
    text: string;
  }>;
  usage?: {
    input_tokens: number;
    output_tokens: number;
  };
}

async function diagnosticAnthropic() {
  console.log('üîç Diagnostic de l\'API Anthropic...\n');
  
  // Test 1: V√©rification de la cl√© API
  console.log('1. V√©rification de la cl√© API:');
  console.log(`   Cl√© pr√©sente: ${apiKey ? 'Oui' : 'Non'}`);
  console.log(`   Format: ${apiKey ? apiKey.substring(0, 15) + '...' : 'N/A'}`);
  console.log(`   Longueur: ${apiKey ? apiKey.length : 0} caract√®res\n`);

  if (!apiKey) {
    console.error('‚ùå Aucune cl√© API trouv√©e. V√©rifiez votre fichier .env');
    return;
  }

  // Test 2: Requ√™te simple
  console.log('2. Test de requ√™te simple...');
  try {
    const simpleResponse = await axios.post<AnthropicResponse>(
      "https://api.anthropic.com/v1/messages",
      {
        model: "claude-3-5-sonnet-20241022",
        max_tokens: 100,
        messages: [
          { role: "user", content: "Bonjour, r√©pondez juste 'Test r√©ussi'" }
        ]
      },
      {
        headers: {
          "x-api-key": apiKey,
          "anthropic-version": "2023-06-01",
          "content-type": "application/json"
        }
      }
    );
    
    console.log('   ‚úÖ Requ√™te simple r√©ussie');
    console.log(`   R√©ponse: ${simpleResponse.data.content[0].text}`);
    console.log(`   Tokens utilis√©s: ${simpleResponse.data.usage?.input_tokens + (simpleResponse.data.usage?.output_tokens || 0)}\n`);
    
  } catch (error: any) {
    console.log('   ‚ùå Erreur lors de la requ√™te simple:');
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Message: ${JSON.stringify(error.response.data, null, 2)}`);
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
    console.log('');
    return;
  }

  // Test 3: Requ√™te avec structure de consultation m√©dicale
  console.log('3. Test avec structure de consultation m√©dicale...');
  try {
    const systemPrompt = `Vous √™tes un m√©decin exp√©riment√© sp√©cialis√© dans la r√©daction de synth√®ses de consultations m√©dicales.
    R√©digez une synth√®se professionnelle, structur√©e et compl√®te en fran√ßais m√©dical appropri√©.
    Utilisez une structure claire avec des sections bien d√©finies: MOTIF DE CONSULTATION, ANAMN√àSE, EXAMEN CLINIQUE, DIAGNOSTIC, CONDUITE √Ä TENIR.
    Soyez pr√©cis, factuel et utilisez une terminologie m√©dicale appropri√©e.
    R√©pondez uniquement avec le contenu de la synth√®se, sans introduction ni conclusion.`;
    
    const userPrompt = `R√©digez une synth√®se de consultation m√©dicale pour:
    Patient: Jean Dupont, 45 ans, n√© le 1978-05-15
    Date de consultation: ${new Date().toLocaleDateString('fr-FR')}
    Motif de consultation: Douleurs lombaires
    Notes de consultation: Patient se plaint de douleurs lombaires depuis 3 jours, sans traumatisme apparent
    Diagnostic: Lombalgie aigu√´
    Traitement: Antalgiques, repos relatif
    
    Cr√©ez une synth√®se m√©dicale professionnelle compl√®te en utilisant un format structur√© avec des sections clairement identifi√©es.`;

    console.log('   Envoi de la requ√™te...');
    const response = await axios.post<AnthropicResponse>(
      "https://api.anthropic.com/v1/messages",
      {
        model: "claude-3-5-sonnet-20241022",
        max_tokens: 1024,
        temperature: 0.3,
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ]
      },
      {
        headers: {
          "x-api-key": apiKey,
          "anthropic-version": "2023-06-01",
          "content-type": "application/json"
        },
        timeout: 30000
      }
    );

    console.log('   ‚úÖ Requ√™te avec consultation m√©dicale r√©ussie');
    console.log(`   Longueur de la r√©ponse: ${response.data.content[0].text.length} caract√®res`);
    console.log(`   Tokens utilis√©s: ${response.data.usage?.input_tokens + (response.data.usage?.output_tokens || 0)}`);
    console.log('\n   D√©but de la r√©ponse:');
    console.log('   ' + '='.repeat(50));
    console.log('   ' + response.data.content[0].text.substring(0, 300) + '...');
    console.log('   ' + '='.repeat(50));
    
  } catch (error: any) {
    console.log('   ‚ùå Erreur lors de la requ√™te avec consultation m√©dicale:');
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Message: ${JSON.stringify(error.response.data, null, 2)}`);
      
      // Diagnostic sp√©cifique selon l'erreur
      if (error.response.status === 400) {
        console.log('\n   üîç Diagnostic erreur 400:');
        console.log('   - V√©rifiez la structure du prompt');
        console.log('   - V√©rifiez les param√®tres max_tokens et model');
        console.log('   - V√©rifiez le format des messages');
      } else if (error.response.status === 401) {
        console.log('\n   üîç Diagnostic erreur 401:');
        console.log('   - Cl√© API invalide ou expir√©e');
        console.log('   - V√©rifiez votre compte Anthropic');
      } else if (error.response.status === 429) {
        console.log('\n   üîç Diagnostic erreur 429:');
        console.log('   - Limite de taux d√©pass√©e');
        console.log('   - Attendez avant de r√©essayer');
      }
    } else {
      console.log(`   Erreur: ${error.message}`);
    }
  }

  // Test 4: V√©rification de la limite de taux
  console.log('\n4. Informations sur les limites:');
  console.log('   - Mod√®le: claude-3-5-sonnet-20241022');
  console.log('   - Limite recommand√©e: 1000 tokens/minute pour les comptes gratuits');
  console.log('   - Limite recommand√©e: 10000 tokens/minute pour les comptes payants');
  console.log('\n‚úÖ Diagnostic termin√©');
}

// Fonction principale
async function main() {
  console.log('üöÄ D√©marrage du diagnostic complet\n');
  
  // Diagnostic de l'API Anthropic
  await diagnosticAnthropic();
  
  console.log('\nüìã R√©sum√© des recommandations:');
  console.log('');
  console.log('1. V√©rifiez que votre cl√© API Anthropic est correcte');
  console.log('2. Assurez-vous que votre serveur est d√©marr√©');
  console.log('3. V√©rifiez la structure de votre requ√™te API');
  console.log('4. Surveillez les limites de taux de l\'API');
  console.log('5. Utilisez des timeouts appropri√©s (30-60 secondes)');
  console.log('6. G√©rez les erreurs sp√©cifiques (400, 401, 429, 500)');
  console.log('');
  console.log('Pour ex√©cuter ce script:');
  console.log('npx ts-node debug-anthropic.ts');
}

// Ex√©cution du diagnostic
if (require.main === module) {
  main().catch(console.error);
}

export { diagnosticAnthropic }; 